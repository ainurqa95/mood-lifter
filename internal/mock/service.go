// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//      mockgen -source=internal/service/service.go
//

// Package mock_service is a generated GoMock package.
package mock

import (
context "context"
reflect "reflect"

model "github.com/ainurqa95/mood-lifter/internal/model"
gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateIfNotExists mocks base method.
func (m *MockUserService) CreateIfNotExists(ctx context.Context, info *model.UserInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIfNotExists", ctx, info)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIfNotExists indicates an expected call of CreateIfNotExists.
func (mr *MockUserServiceMockRecorder) CreateIfNotExists(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIfNotExists", reflect.TypeOf((*MockUserService)(nil).CreateIfNotExists), ctx, info)
}

// GetUsersByOffset mocks base method.
func (m *MockUserService) GetUsersByOffset(ctx context.Context, limit, offset int) ([]model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByOffset", ctx, limit, offset)
	ret0, _ := ret[0].([]model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByOffset indicates an expected call of GetUsersByOffset.
func (mr *MockUserServiceMockRecorder) GetUsersByOffset(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByOffset", reflect.TypeOf((*MockUserService)(nil).GetUsersByOffset), ctx, limit, offset)
}

// MockComplimentService is a mock of ComplimentService interface.
type MockComplimentService struct {
	ctrl     *gomock.Controller
	recorder *MockComplimentServiceMockRecorder
}

// MockComplimentServiceMockRecorder is the mock recorder for MockComplimentService.
type MockComplimentServiceMockRecorder struct {
	mock *MockComplimentService
}

// NewMockComplimentService creates a new mock instance.
func NewMockComplimentService(ctrl *gomock.Controller) *MockComplimentService {
	mock := &MockComplimentService{ctrl: ctrl}
	mock.recorder = &MockComplimentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplimentService) EXPECT() *MockComplimentServiceMockRecorder {
	return m.recorder
}

// GetRandom mocks base method.
func (m *MockComplimentService) GetRandom(ctx context.Context) (*model.Compliment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandom", ctx)
	ret0, _ := ret[0].(*model.Compliment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandom indicates an expected call of GetRandom.
func (mr *MockComplimentServiceMockRecorder) GetRandom(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandom", reflect.TypeOf((*MockComplimentService)(nil).GetRandom), ctx)
}

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageService) Create(ctx context.Context, chatId int64, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, chatId, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessageServiceMockRecorder) Create(ctx, chatId, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageService)(nil).Create), ctx, chatId, text)
}
