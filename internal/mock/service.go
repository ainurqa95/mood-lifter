// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ainurqa95/mood-lifter/internal/service (interfaces: UserService,ComplimentService,MessageService)
//
// Generated by this command:
//
//	mockgen -destination ./mock/service.go -package mock . UserService,ComplimentService,MessageService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/ainurqa95/mood-lifter/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateIfNotExists mocks base method.
func (m *MockUserService) CreateIfNotExists(arg0 context.Context, arg1 *model.UserInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIfNotExists", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIfNotExists indicates an expected call of CreateIfNotExists.
func (mr *MockUserServiceMockRecorder) CreateIfNotExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIfNotExists", reflect.TypeOf((*MockUserService)(nil).CreateIfNotExists), arg0, arg1)
}

// GetUsersByPeriodWithOffset mocks base method.
func (m *MockUserService) GetUsersByPeriodWithOffset(arg0 context.Context, arg1 []int, arg2, arg3 int) ([]model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByPeriodWithOffset", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByPeriodWithOffset indicates an expected call of GetUsersByPeriodWithOffset.
func (mr *MockUserServiceMockRecorder) GetUsersByPeriodWithOffset(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByPeriodWithOffset", reflect.TypeOf((*MockUserService)(nil).GetUsersByPeriodWithOffset), arg0, arg1, arg2, arg3)
}

// UpdatePeriodType mocks base method.
func (m *MockUserService) UpdatePeriodType(arg0 context.Context, arg1 int, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePeriodType", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePeriodType indicates an expected call of UpdatePeriodType.
func (mr *MockUserServiceMockRecorder) UpdatePeriodType(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePeriodType", reflect.TypeOf((*MockUserService)(nil).UpdatePeriodType), arg0, arg1, arg2)
}

// MockComplimentService is a mock of ComplimentService interface.
type MockComplimentService struct {
	ctrl     *gomock.Controller
	recorder *MockComplimentServiceMockRecorder
}

// MockComplimentServiceMockRecorder is the mock recorder for MockComplimentService.
type MockComplimentServiceMockRecorder struct {
	mock *MockComplimentService
}

// NewMockComplimentService creates a new mock instance.
func NewMockComplimentService(ctrl *gomock.Controller) *MockComplimentService {
	mock := &MockComplimentService{ctrl: ctrl}
	mock.recorder = &MockComplimentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplimentService) EXPECT() *MockComplimentServiceMockRecorder {
	return m.recorder
}

// GetRandom mocks base method.
func (m *MockComplimentService) GetRandom(arg0 context.Context) (*model.Compliment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandom", arg0)
	ret0, _ := ret[0].(*model.Compliment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandom indicates an expected call of GetRandom.
func (mr *MockComplimentServiceMockRecorder) GetRandom(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandom", reflect.TypeOf((*MockComplimentService)(nil).GetRandom), arg0)
}

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageService) Create(arg0 context.Context, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessageServiceMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageService)(nil).Create), arg0, arg1, arg2)
}
